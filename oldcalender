<!DOCTYPE html>
<html lang="ja">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>シフト壁紙ジェネレーター for iPhone 15</title>
    <script src="https://cdn.tailwindcss.com"></script>
    <!-- 壁紙生成用にEmblema Oneフォントを読み込む -->
    <link rel="preconnect" href="https://fonts.googleapis.com">
    <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
    <link href="https://fonts.googleapis.com/css2?family=Emblema+One&display=swap" rel="stylesheet">
    <style>
        /* サイトのUIはデフォルトフォントを使用 */
        body {
            font-family: sans-serif;
        }
        /* iPhone 15の画面アスペクト比（約19.5:9）を維持するためのスタイル */
        .canvas-container {
            width: 100%;
            max-width: 300px; /* プレビューの最大幅 */
            aspect-ratio: 1179 / 2556;
            margin: auto;
            border-radius: 1.5rem;
            overflow: hidden;
        }
        canvas {
            width: 100%;
            height: 100%;
            display: block;
        }
        /* カレンダーの日付スタイル */
        .calendar-day {
            padding: 0.25rem;
            cursor: pointer;
            border-radius: 9999px; /* full circle */
            transition: background-color 0.2s, color 0.2s;
            line-height: 1.75rem;
            width: 1.75rem;
            height: 1.75rem;
            display: flex;
            justify-content: center;
            align-items: center;
            margin: auto;
        }
        .calendar-day.selected {
            background-color: #4338ca; /* indigo-700 */
            color: white;
            font-weight: bold;
        }
        .calendar-day.disabled {
            color: #9ca3af; /* gray-400 */
            cursor: not-allowed;
        }
    </style>
</head>
<body class="bg-gray-100 text-gray-800">

    <div class="container mx-auto p-4 md:p-8 max-w-4xl">
        <header class="text-center mb-8">
            <h1 class="text-3xl md:text-4xl font-bold text-gray-900">シフト壁紙ジェネレーター</h1>
            <p class="text-gray-600 mt-2">iPhone 15シリーズに最適化されたシフト表壁紙を作成します。</p>
        </header>

        <main class="grid grid-cols-1 md:grid-cols-2 gap-8">
            <!-- 入力フォームエリア -->
            <div class="bg-white p-6 rounded-2xl shadow-lg">
                <h2 class="text-2xl font-bold mb-4 border-b pb-2">1. シフトの日付を選択</h2>
                
                <!-- Calendar UI -->
                <div id="calendar-ui">
                    <div id="calendar-header" class="flex justify-between items-center mb-4">
                        <button id="prev-month-btn" class="px-3 py-1 bg-gray-200 rounded-md hover:bg-gray-300">&lt;</button>
                        <h3 id="month-year-header" class="text-lg font-bold"></h3>
                        <button id="next-month-btn" class="px-3 py-1 bg-gray-200 rounded-md hover:bg-gray-300">&gt;</button>
                    </div>
                    <div id="calendar-grid" class="grid grid-cols-7 gap-y-2 text-center text-sm">
                        <!-- Day names and dates will be generated by JS -->
                    </div>
                </div>

                <button id="add-selected-btn" class="mt-4 w-full bg-indigo-600 text-white font-bold py-2 px-4 rounded-lg hover:bg-indigo-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500 transition-colors duration-300">
                    選択した日付をシフトに追加
                </button>

                <div id="shift-list-container" class="mt-6">
                    <h3 class="text-lg font-bold mb-2">追加済みのシフト</h3>
                    <ul id="shift-list" class="space-y-2 text-sm">
                        <li class="text-gray-500">まだシフトが追加されていません。</li>
                    </ul>
                     <button id="clear-shifts" class="mt-4 w-full bg-red-500 text-white font-bold py-2 px-4 rounded-lg hover:bg-red-600 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-red-400 transition-colors duration-300">
                        全シフトを削除
                    </button>
                </div>
            </div>

            <!-- 壁紙プレビュー＆生成エリア -->
            <div class="bg-white p-6 rounded-2xl shadow-lg">
                <h2 class="text-2xl font-bold mb-4 border-b pb-2">2. 壁紙をダウンロード</h2>
                
                <div class="canvas-container shadow-inner bg-gray-200">
                    <canvas id="wallpaper-canvas"></canvas>
                </div>

                <div class="mt-6 space-y-3">
                     <!-- ★★★ 変更点: 「壁紙を生成する」ボタンを削除 ★★★ -->
                    <a id="download-link" class="hidden w-full bg-blue-500 text-white font-bold py-3 px-4 rounded-lg hover:bg-blue-600 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-400 transition-colors duration-300 text-lg text-center">
                        ダウンロード
                    </a>
                </div>
                 <p class="text-xs text-gray-500 mt-4 text-center">
                    シフトを追加・削除するとプレビューが自動更新されます。
                </p>
            </div>
        </main>
        
        <footer class="text-center mt-12 py-4">
            <p class="text-sm text-gray-500">© 2024 シフト壁紙ジェネレーター. All Rights Reserved.</p>
        </footer>
    </div>

    <script>
        document.addEventListener('DOMContentLoaded', () => {
            // --- DOM要素 ---
            const shiftList = document.getElementById('shift-list');
            const clearShiftsBtn = document.getElementById('clear-shifts');
            // ★★★ 変更点: generateBtnを削除 ★★★
            const downloadLink = document.getElementById('download-link');
            const canvas = document.getElementById('wallpaper-canvas');
            const ctx = canvas.getContext('2d');
            const monthYearHeader = document.getElementById('month-year-header');
            const prevMonthBtn = document.getElementById('prev-month-btn');
            const nextMonthBtn = document.getElementById('next-month-btn');
            const calendarGrid = document.getElementById('calendar-grid');
            const addSelectedBtn = document.getElementById('add-selected-btn');

            // --- 状態管理 ---
            let shifts = [];
            let currentDate = new Date();
            let selectedDates = new Set();

            // --- 初期化 ---
            canvas.width = 1179;
            canvas.height = 2556;

            // --- 関数定義 ---

            const renderShiftList = () => {
                shiftList.innerHTML = '';
                if (shifts.length === 0) {
                    shiftList.innerHTML = '<li class="text-gray-500">まだシフトが追加されていません。</li>';
                    return;
                }
                
                shifts.sort((a, b) => new Date(a.date) - new Date(b.date));

                shifts.forEach((shift, index) => {
                    const li = document.createElement('li');
                    li.className = 'flex justify-between items-center bg-gray-100 p-2 rounded-md';
                    const date = new Date(shift.date.replace(/-/g, '/'));
                    const formattedDate = `${date.getMonth() + 1}/${date.getDate()}(${['日', '月', '火', '水', '木', '金', '土'][date.getDay()]})`;
                    li.innerHTML = `
                        <span><strong>${formattedDate}:</strong> ${shift.name}</span>
                        <button data-index="${index}" class="remove-btn text-red-500 hover:text-red-700 font-bold">×</button>
                    `;
                    shiftList.appendChild(li);
                });
            };

            const generateCalendar = (year, month) => {
                calendarGrid.innerHTML = '';
                monthYearHeader.textContent = `${year}年 ${month + 1}月`;
                
                const firstDay = new Date(year, month, 1).getDay();
                const daysInMonth = new Date(year, month + 1, 0).getDate();

                // 曜日ヘッダー
                ['日', '月', '火', '水', '木', '金', '土'].forEach(day => {
                    const dayEl = document.createElement('div');
                    dayEl.className = 'font-bold text-xs';
                    dayEl.textContent = day;
                    calendarGrid.appendChild(dayEl);
                });

                // 空白セル
                for (let i = 0; i < firstDay; i++) {
                    calendarGrid.appendChild(document.createElement('div'));
                }

                // 日付セル
                for (let i = 1; i <= daysInMonth; i++) {
                    const dayEl = document.createElement('div');
                    const dateStr = `${year}-${String(month + 1).padStart(2, '0')}-${String(i).padStart(2, '0')}`;
                    dayEl.className = 'calendar-day';
                    dayEl.textContent = i;
                    dayEl.dataset.date = dateStr;

                    if (selectedDates.has(dateStr)) {
                        dayEl.classList.add('selected');
                    }

                    dayEl.addEventListener('click', () => {
                        if (selectedDates.has(dateStr)) {
                            selectedDates.delete(dateStr);
                            dayEl.classList.remove('selected');
                        } else {
                            selectedDates.add(dateStr);
                            dayEl.classList.add('selected');
                        }
                    });
                    calendarGrid.appendChild(dayEl);
                }
            };

            const drawWallpaper = async () => {
                await document.fonts.load('400 72px "Emblema One"');
                await document.fonts.load('400 48px "Emblema One"');
                await document.fonts.load('400 32px "Emblema One"');

                const gradient = ctx.createLinearGradient(0, 0, 0, canvas.height);
                gradient.addColorStop(0, '#2c3e50');
                gradient.addColorStop(1, '#3498db');
                ctx.fillStyle = gradient;
                ctx.fillRect(0, 0, canvas.width, canvas.height);

                let baseDate = new Date();
                if (shifts.length > 0) {
                    baseDate = new Date(shifts[0].date.replace(/-/g, '/'));
                }

                let calendarStartDate, calendarEndDate;
                const baseDay = baseDate.getDate();
                if (baseDay < 15) {
                    calendarStartDate = new Date(baseDate.getFullYear(), baseDate.getMonth() - 1, 15);
                    calendarEndDate = new Date(baseDate.getFullYear(), baseDate.getMonth(), 15);
                } else {
                    calendarStartDate = new Date(baseDate.getFullYear(), baseDate.getMonth(), 15);
                    calendarEndDate = new Date(baseDate.getFullYear(), baseDate.getMonth() + 1, 15);
                }

                const monthNames = ["Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec"];
                ctx.fillStyle = 'rgba(255, 255, 255, 0.9)';
                ctx.font = `72px "Emblema One"`;
                ctx.textAlign = 'center';
                ctx.fillText(`${monthNames[calendarStartDate.getMonth()]} - ${monthNames[calendarEndDate.getMonth()]} ${calendarStartDate.getFullYear()}`, canvas.width / 2, 850);

                const horizontalPadding = 80;
                const calendarWidth = canvas.width - (horizontalPadding * 2);
                const calendarTopMargin = 1000;
                const cellWidth = calendarWidth / 7;
                const cellHeight = 150;
                const shiftMap = new Map(shifts.map(s => [new Date(s.date.replace(/-/g, '/')).toDateString(), s.name]));

                ctx.font = `40px "Emblema One"`;
                ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat'].forEach((day, index) => {
                    ctx.fillStyle = 'rgba(255, 255, 255, 0.7)';
                    ctx.fillText(day, horizontalPadding + cellWidth * (index + 0.5), calendarTopMargin);
                });

                let dayIterator = new Date(calendarStartDate);
                dayIterator.setDate(dayIterator.getDate() - dayIterator.getDay());

                for (let weekIndex = 0; weekIndex < 6; weekIndex++) {
                    for (let dayIndex = 0; dayIndex < 7; dayIndex++) {
                        const currentGridDate = new Date(dayIterator.getFullYear(), dayIterator.getMonth(), dayIterator.getDate() + (weekIndex * 7) + dayIndex);
                        if (currentGridDate < calendarStartDate || currentGridDate > calendarEndDate) continue;

                        const x = horizontalPadding + cellWidth * (dayIndex + 0.5);
                        const y = (calendarTopMargin + 80) + cellHeight * weekIndex;
                        const dayOfMonth = currentGridDate.getDate();

                        if (shiftMap.has(currentGridDate.toDateString())) {
                            ctx.beginPath();
                            ctx.arc(x, y, 50, 0, Math.PI * 2);
                            ctx.fillStyle = 'rgba(255, 255, 255, 0.9)';
                            ctx.fill();
                            ctx.fillStyle = '#2c3e50';
                            ctx.font = `48px "Emblema One"`;
                            ctx.fillText(dayOfMonth, x, y + 15);
                            if (currentGridDate.getDay() === 0) {
                                const shiftTime = shiftMap.get(currentGridDate.toDateString());
                                ctx.fillStyle = 'rgba(255, 255, 255, 0.95)';
                                ctx.font = `32px "Emblema One"`;
                                ctx.fillText(shiftTime, x, y + 85);
                            }
                        } else {
                            ctx.fillStyle = 'rgba(255, 255, 255, 0.8)';
                            ctx.font = `48px "Emblema One"`;
                            ctx.fillText(dayOfMonth, x, y + 15);
                        }
                    }
                }
            };

            // ★★★ 変更点: 壁紙更新とダウンロードリンク表示をまとめた関数 ★★★
            const updateWallpaperPreview = () => {
                drawWallpaper().then(() => {
                    downloadLink.href = canvas.toDataURL('image/png');
                    downloadLink.download = `shift_wallpaper_${Date.now()}.png`;
                    downloadLink.classList.remove('hidden');
                    downloadLink.classList.add('inline-block');
                });
            };

            // --- イベントリスナー ---
            prevMonthBtn.addEventListener('click', () => {
                currentDate.setMonth(currentDate.getMonth() - 1);
                generateCalendar(currentDate.getFullYear(), currentDate.getMonth());
            });

            nextMonthBtn.addEventListener('click', () => {
                currentDate.setMonth(currentDate.getMonth() + 1);
                generateCalendar(currentDate.getFullYear(), currentDate.getMonth());
            });

            addSelectedBtn.addEventListener('click', () => {
                const existingDates = new Set(shifts.map(s => s.date));
                selectedDates.forEach(dateStr => {
                    if (existingDates.has(dateStr)) return;

                    const date = new Date(dateStr.replace(/-/g, '/'));
                    const name = (date.getDay() === 0) ? '16:30' : '17:00-22:00';
                    shifts.push({ date: dateStr, name });
                });
                selectedDates.clear();
                renderShiftList();
                generateCalendar(currentDate.getFullYear(), currentDate.getMonth());
                updateWallpaperPreview(); // ★★★ 変更点 ★★★
            });

            shiftList.addEventListener('click', (e) => {
                if (e.target.classList.contains('remove-btn')) {
                    const index = e.target.dataset.index;
                    shifts.splice(index, 1);
                    renderShiftList();
                    updateWallpaperPreview(); // ★★★ 変更点 ★★★
                }
            });
            
            clearShiftsBtn.addEventListener('click', () => {
                if (confirm('すべてのシフトを削除しますか？')) {
                    shifts = [];
                    renderShiftList();
                    updateWallpaperPreview(); // ★★★ 変更点 ★★★
                }
            });

            // ★★★ 変更点: generateBtnのイベントリスナーを削除 ★★★

            // --- 初期実行 ---
            renderShiftList();
            generateCalendar(currentDate.getFullYear(), currentDate.getMonth());
            updateWallpaperPreview(); // ★★★ 変更点 ★★★
        });
    </script>
</body>
</html>
